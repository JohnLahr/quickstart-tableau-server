{
    "AWSTemplateFormatVersion": "2010-09-09",
    "Description": "AWS CloudFormation Template: Tableau Server Cluster running on Linux (CentOS/Ubuntu).",
    "Metadata": {
        "AWS::CloudFormation::Interface": {
            "ParameterGroups": [
                {
                    "Label": {
                        "default": "AWS Environment and Machine Configuration"
                    },
                    "Parameters": [
                        "VpcId",
                        "PrivateSubnetIds",
                        "PublicSubnetIds",
                        "InstanceType",
                        "WorkerCount",
                        "KeyPairName",
                        "AMIOS",
                        "SourceCIDR",
                        "ExistingSecurityGroup",
                        "IPAddress"
                    ]
                },
                {
                    "Label": {
                        "default": "Server DNS configuration"
                    },
                    "Parameters": [
                        "SSLCertificateARN",
                        "AWSPublicFQDN",
                        "AWSHostedZoneID"
                    ]
                },
                {
                    "Label": {
                        "default": "Secrets"
                    },
                    "Parameters": [
                        "Username",
                        "Password",
                        "TableauServerAdminUser",
                        "TableauServerAdminPassword"
                    ]
                },
                {
                    "Label": {
                        "default": "Registration"
                    },
                    "Parameters": [
                        "AcceptEULA",
                        "TableauServerLicenseKey",
                        "RegFirstName",
                        "RegLastName",
                        "RegEmail",
                        "RegCompany",
                        "RegTitle",
                        "RegDepartment",
                        "RegIndustry",
                        "RegPhone",
                        "RegCity",
                        "RegState",
                        "RegZip",
                        "RegCountry"
                    ]
                }
            ],
            "ParameterLabels": {
                "AMIOS": {
                    "default": "AMI Operating System"
                },
                "AWSHostedZoneID": {
                    "default": "DNS Zone ID"
                },
                "AWSPublicFQDN": {
                    "default": "Full DNS Name for Cluster"
                },
                "AcceptEULA": {
                    "default": "Accept Tableau End User License Agreement"
                },
                "ExistingSecurityGroup": {
                    "default": "Existing Security Group"
                },
                "IPAddress": {
                    "default": "EIP address for initial node"
                },
                "InstanceType": {
                    "default": "Amazon EC2 instance type"
                },
                "KeyPairName": {
                    "default": "Key Pair Name"
                },
                "Password": {
                    "default": "Tableau Services Manager (TSM) administrator password"
                },
                "PrivateSubnetIds": {
                    "default": "Target Private Subnets"
                },
                "PublicSubnetIds": {
                    "default": "Target Public Subnets"
                },
                "RegCity": {
                    "default": "City"
                },
                "RegCompany": {
                    "default": "Company"
                },
                "RegCountry": {
                    "default": "Country"
                },
                "RegDepartment": {
                    "default": "Department"
                },
                "RegEmail": {
                    "default": "Email Address"
                },
                "RegFirstName": {
                    "default": "First Name"
                },
                "RegIndustry": {
                    "default": "Industry"
                },
                "RegLastName": {
                    "default": "Last Name"
                },
                "RegPhone": {
                    "default": "Phone"
                },
                "RegState": {
                    "default": "State"
                },
                "RegTitle": {
                    "default": "Title"
                },
                "RegZip": {
                    "default": "Zip/Postal Code"
                },
                "SSLCertificateARN": {
                    "default": "SSL Certificate ARN (Requires matching DNS name)"
                },
                "SourceCIDR": {
                    "default": "Source CIDR for Access"
                },
                "TableauServerAdminPassword": {
                    "default": "Tableau Server administrator password"
                },
                "TableauServerAdminUser": {
                    "default": "Tableau Server administrator username"
                },
                "TableauServerLicenseKey": {
                    "default": "Tableau Activation Key"
                },
                "Username": {
                    "default": "Tableau Services Manager (TSM) administrator username"
                },
                "VpcId": {
                    "default": "Target VPC"
                },
                "WorkerCount": {
                    "default": "Number of additional Tableau Server instances"
                }
            }
        }
    },
    "Parameters": {
        "AMIOS": {
            "AllowedValues": [
                "CentOS-7-HVM",
                "Ubuntu-Server-16.04-LTS-HVM"
            ],
            "Default": "CentOS-7-HVM",
            "Description": "The Linux distribution for the AMI to be used for the EC2 instances",
            "Type": "String"
        },
        "AWSHostedZoneID": {
            "Description": "DNS Zone ID to contain the cluster's DNS entry (blank = no DNS)",
            "Type": "String"
        },
        "AWSPublicFQDN": {
            "Description": "Tableau Server portal will be reachable at this address (blank = no DNS)",
            "Type": "String"
        },
        "AcceptEULA": {
            "AllowedPattern": "Yes",
            "AllowedValues": [
                "Yes",
                "No"
            ],
            "Description": "View the EULA at the Link: https://www.tableau.com/eula",
            "Type": "String"
        },
        "ExistingSecurityGroup": {
            "Description": "Provide an existing security group or leave blank for creating a new one",
            "Type": "String"
        },
        "IPAddress": {
            "Description": "Provide an Elastic IP address (EIP) for the initial node (blank = no EIP)",
            "Type": "String"
        },
        "InstanceType": {
            "AllowedValues": [
                "m4.4xlarge",
                "m4.10xlarge",
                "m5.4xlarge",
                "m5.12xlarge"
            ],
            "ConstraintDescription": "must be a valid EC2 instance type.",
            "Default": "m4.4xlarge",
            "Description": "Amazon EC2 instance type",
            "Type": "String"
        },
        "KeyPairName": {
            "AllowedPattern": ".+",
            "ConstraintDescription": "must be the name of an existing EC2 KeyPair.",
            "Description": "Name of an existing EC2 KeyPair to enable SSH access to the instances",
            "Type": "AWS::EC2::KeyPair::KeyName"
        },
        "Password": {
            "Description": "Tableau Services Manager (TSM) administrator password",
            "MinLength": "6",
            "NoEcho": "true",
            "Type": "String"
        },
        "PrivateSubnetIds": {
            "Description": "The private subnets to use",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "PublicSubnetIds": {
            "Description": "The public subnets to use",
            "Type": "List<AWS::EC2::Subnet::Id>"
        },
        "RegCity": {
            "Description": "City",
            "MinLength": "1",
            "Type": "String"
        },
        "RegCompany": {
            "Description": "Company",
            "MinLength": "1",
            "Type": "String"
        },
        "RegCountry": {
            "Description": "Country",
            "MinLength": "1",
            "Type": "String"
        },
        "RegDepartment": {
            "Description": "Department",
            "MinLength": "1",
            "Type": "String"
        },
        "RegEmail": {
            "Description": "Email",
            "MinLength": "1",
            "Type": "String"
        },
        "RegFirstName": {
            "Description": "First Name",
            "MinLength": "1",
            "Type": "String"
        },
        "RegIndustry": {
            "Description": "Industry",
            "MinLength": "1",
            "Type": "String"
        },
        "RegLastName": {
            "Description": "Last Name",
            "MinLength": "1",
            "Type": "String"
        },
        "RegPhone": {
            "Description": "Phone",
            "MinLength": "1",
            "Type": "String"
        },
        "RegState": {
            "Description": "State",
            "MinLength": "1",
            "Type": "String"
        },
        "RegTitle": {
            "Description": "Title",
            "MinLength": "1",
            "Type": "String"
        },
        "RegZip": {
            "Description": "ZIP/Postal Code",
            "MinLength": "1",
            "Type": "String"
        },
        "SSLCertificateARN": {
            "Default": "",
            "Description": "The Amazon Resource Name for the existing SSL cert you wish to use; empty for none",
            "Type": "String"
        },
        "SourceCIDR": {
            "AllowedPattern": "^(([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])\\.){3}([0-9]|[1-9][0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])(\\/([0-9]|[1-2][0-9]|3[0-2]))$",
            "ConstraintDescription": "Must be a valid IP CIDR range of the form x.x.x.x/x.",
            "Description": "IP address/range to allow access from",
            "Type": "String"
        },
        "TableauServerAdminPassword": {
            "Description": "The password of the initial administrator for Tableau Server",
            "MinLength": "1",
            "NoEcho": "true",
            "Type": "String"
        },
        "TableauServerAdminUser": {
            "Description": "The name of the initial administrator for Tableau Server",
            "MinLength": "1",
            "Type": "String"
        },
        "TableauServerLicenseKey": {
            "Description": "License Key",
            "MinLength": "1",
            "Type": "String"
        },
        "Username": {
            "AllowedPattern": "^(?!(tableau|tsmagent|admin|root)$)[A-Za-z0-9]+$",
            "Description": "Tableau Services Manager (TSM) administrator username (cannot be 'tableau' or 'tsmagent' or 'admin' or 'root')",
            "MaxLength": "30",
            "Type": "String"
        },
        "VpcId": {
            "Description": "The ID of the VPC into which to deploy the cluster",
            "Type": "AWS::EC2::VPC::Id"
        },
        "WorkerCount": {
            "Default": "2",
            "Description": "Number of (additional) worker nodes",
            "MaxValue": "30",
            "MinValue": "2",
            "Type": "Number"
        }
    },
    "Mappings": {
        "AWSAMIRegionMap": {
            "AMI": {
                "CENTOS7HVM": "CentOS Linux 7 x86_64 HVM EBS ENA 1805_01-b7ee8a69-ee97-4a49-9e68-afaee216db2e-ami-77ec9308.4",
                "US1604HVM": "ubuntu/images/hvm-ssd/ubuntu-xenial-16.04-amd64-server-20181223"
            },
            "ap-northeast-1": {
                "CENTOS7HVM": "ami-8e8847f1",
                "US1604HVM": "ami-0d5e82481c5fd4ad5"
            },
            "ap-northeast-2": {
                "CENTOS7HVM": "ami-bf9c36d1",
                "US1604HVM": "ami-0507b772e2c9b8c15"
            },
            "ap-south-1": {
                "CENTOS7HVM": "ami-1780a878",
                "US1604HVM": "ami-0c8810f694cbe10ba"
            },
            "ap-southeast-1": {
                "CENTOS7HVM": "ami-8e0205f2",
                "US1604HVM": "ami-09f2be3a5a5867258"
            },
            "ap-southeast-2": {
                "CENTOS7HVM": "ami-d8c21dba",
                "US1604HVM": "ami-04978aa3dd8b62cc8"
            },
            "ca-central-1": {
                "CENTOS7HVM": "ami-e802818c",
                "US1604HVM": "ami-0a851426a8a56bf4b"
            },
            "eu-central-1": {
                "CENTOS7HVM": "ami-dd3c0f36",
                "US1604HVM": "ami-00f3256a9deda4e1b"
            },
            "eu-west-1": {
                "CENTOS7HVM": "ami-3548444c",
                "US1604HVM": "ami-0233bae36f499afe8"
            },
            "eu-west-2": {
                "CENTOS7HVM": "ami-00846a67",
                "US1604HVM": "ami-03c015fc0026bf4fc"
            },
            "sa-east-1": {
                "CENTOS7HVM": "ami-cb5803a7",
                "US1604HVM": "ami-08a4ba9038d7e8565"
            },
            "us-east-1": {
                "CENTOS7HVM": "ami-9887c6e7",
                "US1604HVM": "ami-03a935aafa6b52b97"
            },
            "us-east-2": {
                "CENTOS7HVM": "ami-9c0638f9",
                "US1604HVM": "ami-00c5e3f4a8dd369e8"
            },
            "us-west-1": {
                "CENTOS7HVM": "ami-4826c22b",
                "US1604HVM": "ami-0689ca7fe00282a37"
            },
            "us-west-2": {
                "CENTOS7HVM": "ami-3ecc8f46",
                "US1604HVM": "ami-0dbd6cabe4749f197"
            }
        },
        "LinuxAMINameMap": {
            "CentOS-7-HVM": {
                "Code": "CENTOS7HVM"
            },
            "Ubuntu-Server-16.04-LTS-HVM": {
                "Code": "US1604HVM"
            }
        },
        "DefaultConfiguration": {
            "InstallationConfig": {
                "TableauServerInstallerOnCentos": "https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-server-2018.x86_64.rpm",
                "TableauServerInstallerOnUbuntu": "https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-server-2018_amd64.deb",
                "AutomatedInstaller": "https://s3-us-west-2.amazonaws.com/tableau-quickstart/automated-installer"
            },
            "MachineConfiguration": {
                "SystemVolumeSize": 100
            }
        }
    },
    "Conditions": {
        "HasWorkers": {
            "Fn::Not": [
                {
                    "Fn::Equals": [
                        0,
                        {
                            "Ref": "WorkerCount"
                        }
                    ]
                }
            ]
        },
        "NoSSLCertficate": {
            "Fn::Equals": [
                "",
                {
                    "Ref": "SSLCertificateARN"
                }
            ]
        },
        "HasSSLCertificate": {
            "Fn::Not": [
                {
                    "Condition": "NoSSLCertficate"
                }
            ]
        },
        "NoServerSecurityGroup": {
            "Fn::Equals": [
                "",
                {
                    "Ref": "ExistingSecurityGroup"
                }
            ]
        },
        "HasServerSecurityGroup": {
            "Fn::Not": [
                {
                    "Condition": "NoServerSecurityGroup"
                }
            ]
        },
        "NoElasticIP": {
            "Fn::Equals": [
                "",
                {
                    "Ref": "IPAddress"
                }
            ]
        },
        "HasElasticIP": {
            "Fn::Not": [
                {
                    "Condition": "NoElasticIP"
                }
            ]
        },
        "NoDNSEntry": {
            "Fn::Or": [
                {
                    "Fn::Equals": [
                        "",
                        {
                            "Ref": "AWSHostedZoneID"
                        }
                    ]
                },
                {
                    "Fn::Equals": [
                        "",
                        {
                            "Ref": "AWSPublicFQDN"
                        }
                    ]
                }
            ]
        },
        "CreateDNSEntry": {
            "Fn::Not": [
                {
                    "Condition": "NoDNSEntry"
                }
            ]
        },
        "IsCentos": {
            "Fn::Equals": [
                "CentOS-7-HVM",
                {
                    "Ref": "AMIOS"
                }
            ]
        }
    },
    "Resources": {
        "VpcInfo": {
            "Type": "Custom::VpcInfo",
            "Properties": {
                "ServiceToken": {
                    "Fn::GetAtt": [
                        "InfoLambda",
                        "Arn"
                    ]
                },
                "Region": {
                    "Ref": "AWS::Region"
                },
                "Func": "DescribeVpc",
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "InfoLambda": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
                "Code": {
                    "ZipFile": {
                        "Fn::Join": [
                            "\n",
                            [
                                "var aws = require('aws-sdk');",
                                "",
                                "exports.handler = (e, c) => {",
                                "\tconsole.log('REQUEST RECEIVED:\\n' + JSON.stringify(e));",
                                "",
                                "\t// For Delete requests, immediately send a SUCCESS response.",
                                "\tif (e.RequestType == 'Delete') {",
                                "\t\tsendResponse(e, c, 'SUCCESS');",
                                "\t\treturn;",
                                "\t}",
                                "",
                                "\tvar ec2 = new aws.EC2({ region: e.ResourceProperties.Region });",
                                "\tvar vpc = e.ResourceProperties.VpcId;",
                                "\tvar func = e.ResourceProperties.Func;",
                                "",
                                "\tvar status = 'FAILED';",
                                "\tvar responseData = {};",
                                "\tif (func === 'DescribeVpc') {",
                                "\t\t// Get VPCs with the specified id",
                                "\t\tec2.describeVpcs({ VpcIds: [vpc] }, (err, data) => {",
                                "\t\t\tconsole.log('vpcs:\\n' + JSON.stringify(data));",
                                "\t\t\terr = err || (data.Vpcs.length !== 1 ? 'DescribeVpcs returned ' + data.Vpcs.length + ' results.' : undefined);",
                                "\t\t\tif (err) {",
                                "\t\t\t\tresponseData.Error = 'DescribeVpcs call failed';",
                                "\t\t\t\tconsole.log(responseData.Error + ':\\n', err);",
                                "\t\t\t} else {",
                                "\t\t\t\tstatus = 'SUCCESS';",
                                "\t\t\t\tresponseData = data.Vpcs[0];",
                                "\t\t\t}",
                                "\t\t\tsendResponse(e, c, status, responseData);",
                                "\t\t});",
                                "\t} else {",
                                "\t\tsendResponse(e, c, status, {Error: 'Unknown Function ' + func});",
                                "\t}",
                                "};",
                                "",
                                "// Send response to the pre-signed S3 URL",
                                "function sendResponse(e, c, status, responseData) {",
                                "\tvar responseBody = JSON.stringify({",
                                "\t\tStatus: status,",
                                "\t\tReason: 'See the details in CloudWatch Log Stream: ' + c.logStreamName,",
                                "\t\tPhysicalResourceId: c.logStreamName,",
                                "\t\tStackId: e.StackId,",
                                "\t\tRequestId: e.RequestId,",
                                "\t\tLogicalResourceId: e.LogicalResourceId,",
                                "\t\tData: responseData",
                                "\t});",
                                "",
                                "\tconsole.log('RESPONSE BODY:\\n', responseBody);",
                                "",
                                "\tvar https = require('https');",
                                "\tvar url = require('url');",
                                "",
                                "\tvar parsedUrl = url.parse(e.ResponseURL);",
                                "\tvar options = {",
                                "\t\thostname: parsedUrl.hostname,",
                                "\t\tport: 443,",
                                "\t\tpath: parsedUrl.path,",
                                "\t\tmethod: 'PUT',",
                                "\t\theaders: {",
                                "\t\t\t'content-type': '',",
                                "\t\t\t'content-length': responseBody.length",
                                "\t\t}",
                                "\t};",
                                "",
                                "\tconsole.log('SENDING RESPONSE...\\n');",
                                "",
                                "\tvar request = https.request(options, (response) => {",
                                "\t\tconsole.log('STATUS: ' + response.statusCode);",
                                "\t\tconsole.log('HEADERS: ' + JSON.stringify(response.headers));",
                                "\t\tc.done(); // Tell AWS Lambda function execution is done",
                                "\t});",
                                "",
                                "\trequest.on('error', (err) => {",
                                "\t\tconsole.log('sendResponse Error:' + err);",
                                "\t\tc.done(); // Tell AWS Lambda function execution is done",
                                "\t});",
                                "",
                                "\t// write data to request body",
                                "\trequest.write(responseBody);",
                                "\trequest.end();",
                                "}"
                            ]
                        ]
                    }
                },
                "Handler": "index.handler",
                "Role": {
                    "Fn::GetAtt": [
                        "LambdaExecutionRole",
                        "Arn"
                    ]
                },
                "Runtime": "nodejs8.10",
                "Timeout": "30"
            }
        },
        "LambdaExecutionRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "lambda.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "ManagedPolicyArns": [
                    "arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole"
                ],
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:DescribeVpcs",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "RootRole": {
            "Type": "AWS::IAM::Role",
            "Properties": {
                "AssumeRolePolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                        {
                            "Effect": "Allow",
                            "Principal": {
                                "Service": [
                                    "ec2.amazonaws.com"
                                ]
                            },
                            "Action": [
                                "sts:AssumeRole"
                            ]
                        }
                    ]
                },
                "Path": "/",
                "Policies": [
                    {
                        "PolicyName": "root",
                        "PolicyDocument": {
                            "Version": "2012-10-17",
                            "Statement": [
                                {
                                    "Effect": "Allow",
                                    "Action": [
                                        "cloudformation:DescribeStackResource",
                                        "cloudformation:SignalResource"
                                    ],
                                    "Resource": {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "arn:aws:cloudformation:",
                                                {
                                                    "Ref": "AWS::Region"
                                                },
                                                ":",
                                                {
                                                    "Ref": "AWS::AccountId"
                                                },
                                                ":stack/",
                                                {
                                                    "Ref": "AWS::StackName"
                                                },
                                                "/*"
                                            ]
                                        ]
                                    }
                                },
                                {
                                    "Effect": "Allow",
                                    "Action": "ec2:DescribeInstances",
                                    "Resource": "*"
                                }
                            ]
                        }
                    }
                ]
            }
        },
        "RootInstanceProfile": {
            "Type": "AWS::IAM::InstanceProfile",
            "Properties": {
                "Path": "/",
                "Roles": [
                    {
                        "Ref": "RootRole"
                    }
                ]
            }
        },
        "WorkerWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Condition": "HasWorkers",
            "Properties": {}
        },
        "WorkerWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Condition": "HasWorkers",
            "DependsOn": "PrimaryServer",
            "Properties": {
                "Count": {
                    "Ref": "WorkerCount"
                },
                "Handle": {
                    "Ref": "WorkerWaitHandle"
                },
                "Timeout": "1200"
            }
        },
        "TopologyWaitHandle": {
            "Type": "AWS::CloudFormation::WaitConditionHandle",
            "Condition": "HasWorkers",
            "Properties": {}
        },
        "TopologyWaitCondition": {
            "Type": "AWS::CloudFormation::WaitCondition",
            "Condition": "HasWorkers",
            "DependsOn": "WorkerWaitCondition",
            "Properties": {
                "Count": 1,
                "Handle": {
                    "Ref": "TopologyWaitHandle"
                },
                "Timeout": "2100"
            }
        },
        "LoadBalancerListener": {
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties": {
                "Certificates": {
                    "Fn::If": [
                        "HasSSLCertificate",
                        [
                            {
                                "Ref": "SSLCertificateARN"
                            }
                        ],
                        {
                            "Ref": "AWS::NoValue"
                        }
                    ]
                },
                "DefaultActions": [
                    {
                        "TargetGroupArn": {
                            "Ref": "LoadBalancerTargetGroup"
                        },
                        "Type": "forward"
                    }
                ],
                "LoadBalancerArn": {
                    "Ref": "ServerLoadBalancer"
                },
                "Port": {
                    "Fn::If": [
                        "HasSSLCertificate",
                        "443",
                        "80"
                    ]
                },
                "Protocol": {
                    "Fn::If": [
                        "HasSSLCertificate",
                        "HTTPS",
                        "HTTP"
                    ]
                },
                "SslPolicy": "ELBSecurityPolicy-2016-08"
            }
        },
        "LoadBalancerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Properties": {
                "GroupDescription": "Enable Web traffic",
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": {
                            "Fn::If": [
                                "HasSSLCertificate",
                                "443",
                                "80"
                            ]
                        },
                        "ToPort": {
                            "Fn::If": [
                                "HasSSLCertificate",
                                "443",
                                "80"
                            ]
                        },
                        "CidrIp": {
                            "Ref": "SourceCIDR"
                        }
                    }
                ],
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": "LoadBalancerSecurityGroup"
                    }
                ],
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "LoadBalancerTargetGroup": {
            "Type": "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-cfn-lb-targetgroup"
                },
                "Port": "80",
                "Protocol": "HTTP",
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-cfn-lb-targetgroup"
                        }
                    }
                ],
                "Targets": [
                    {
                        "Id": {
                            "Ref": "PrimaryServer"
                        },
                        "Port": "80"
                    }
                ],
                "TargetType": "instance",
                "VpcId": {
                    "Ref": "VpcId"
                }
            }
        },
        "ServerLoadBalancer": {
            "Type": "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "DependsOn": [
                "LoadBalancerSecurityGroup"
            ],
            "Properties": {
                "Name": {
                    "Fn::Sub": "${AWS::StackName}-cfn-lb"
                },
                "Scheme": "internet-facing",
                "SecurityGroups": [
                    {
                        "Ref": "LoadBalancerSecurityGroup"
                    }
                ],
                "Subnets": {
                    "Fn::Split": [
                        ",",
                        {
                            "Fn::Join": [
                                ",",
                                {
                                    "Ref": "PublicSubnetIds"
                                }
                            ]
                        }
                    ]
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-cfn-lb"
                        }
                    }
                ],
                "Type": "application"
            }
        },
        "DNSNameEntry": {
            "Type": "AWS::Route53::RecordSet",
            "Condition": "CreateDNSEntry",
            "DependsOn": [
                "ServerLoadBalancer"
            ],
            "Properties": {
                "HostedZoneId": {
                    "Ref": "AWSHostedZoneID"
                },
                "Name": {
                    "Fn::Sub": "${AWSPublicFQDN}."
                },
                "Type": "A",
                "AliasTarget": {
                    "HostedZoneId": {
                        "Fn::GetAtt": [
                            "ServerLoadBalancer",
                            "CanonicalHostedZoneNameID"
                        ]
                    },
                    "DNSName": {
                        "Fn::GetAtt": [
                            "ServerLoadBalancer",
                            "DNSName"
                        ]
                    }
                }
            }
        },
        "PrimaryServer": {
            "Type": "AWS::EC2::Instance",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/tmp/secrets.properties": {
                                "mode": "640",
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            {
                                                "Fn::Sub": "tsm_admin_user='${Username}'"
                                            },
                                            {
                                                "Fn::Sub": "tsm_admin_pass='${Password}'"
                                            },
                                            {
                                                "Fn::Sub": "tableau_server_admin_user='${TableauServerAdminUser}'"
                                            },
                                            {
                                                "Fn::Sub": "tableau_server_admin_pass='${TableauServerAdminPassword}'"
                                            }
                                        ]
                                    ]
                                }
                            },
                            "/tmp/tableau-server": {
                                "source": {
                                    "Fn::If": [
                                        "IsCentos",
                                        {
                                            "Fn::FindInMap": [
                                                "DefaultConfiguration",
                                                "InstallationConfig",
                                                "TableauServerInstallerOnCentos"
                                            ]
                                        },
                                        {
                                            "Fn::FindInMap": [
                                                "DefaultConfiguration",
                                                "InstallationConfig",
                                                "TableauServerInstallerOnUbuntu"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "/tmp/automated-installer": {
                                "mode": "550",
                                "source": {
                                    "Fn::FindInMap": [
                                        "DefaultConfiguration",
                                        "InstallationConfig",
                                        "AutomatedInstaller"
                                    ]
                                }
                            },
                            "/tmp/workers.sh": {
                                "mode": "550",
                                "content": {
                                    "Fn::If": [
                                        "HasWorkers",
                                        {
                                            "Fn::Join": [
                                                "\n",
                                                [
                                                    "#!/bin/bash -e",
                                                    "# Wait for workers",
                                                    "sleep 30",
                                                    {
                                                        "Fn::Sub": "wait_json=$(aws cloudformation describe-stack-resource --stack-name \"${AWS::StackName}\" --region \"${AWS::Region}\" --logical-resource-id WorkerWaitCondition)"
                                                    },
                                                    "while [ $(echo $wait_json | jq -r '.StackResourceDetail.ResourceStatus') != 'CREATE_COMPLETE' ]; do",
                                                    "    sleep 10",
                                                    {
                                                        "Fn::Sub": "    wait_json=$(aws cloudformation describe-stack-resource --stack-name \"${AWS::StackName}\" --region \"${AWS::Region}\" --logical-resource-id WorkerWaitCondition)"
                                                    },
                                                    "done",
                                                    "sleep 30",
                                                    "set_topology() {",
                                                    "    source '/tmp/secrets.properties'",
                                                    "    tsm topology list-nodes -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\" | while read p; do",
                                                    "        tsm topology set-process -n \"$p\" -pr clustercontroller -c 1 -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "        tsm topology set-process -n \"$p\" -pr gateway -c 1 -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "        tsm topology set-process -n \"$p\" -pr vizportal -c 1 -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "        tsm topology set-process -n \"$p\" -pr vizqlserver -c 1 -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "        tsm topology set-process -n \"$p\" -pr cacheserver -c 1 -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "        tsm topology set-process -n \"$p\" -pr searchserver -c 1 -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "        tsm topology set-process -n \"$p\" -pr backgrounder -c 1 -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "        tsm topology set-process -n \"$p\" -pr dataserver -c 1 -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "        tsm topology set-process -n \"$p\" -pr dataengine -c 1 -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "        tsm topology set-process -n \"$p\" -pr filestore -c 1 -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "    done",
                                                    "    tsm topology set-process -n node2 -pr pgsql -c 1 -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "    tsm pending-changes apply --ignore-prompt -iw -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "    tsm stop -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "    tsm topology deploy-coordination-service -n node1,node2,node3  -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "    sleep 120",
                                                    "    tsm topology cleanup-coordination-service -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "    tsm start -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                                    "}",
                                                    "send_singal_to_topologyWaitHandle() {",
                                                    "# Signal successful completion",
                                                    {
                                                        "Fn::Sub": "/opt/aws/bin/cfn-signal -e $? '${TopologyWaitHandle}'"
                                                    },
                                                    "}",
                                                    "set_topology",
                                                    "unset -f set_topology",
                                                    "trap send_singal_to_topologyWaitHandle EXIT"
                                                ]
                                            ]
                                        },
                                        "# No action needed"
                                    ]
                                }
                            },
                            "/tmp/config.json": {
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            "{\"configEntities\": {",
                                            "    \"gatewaySettings\": {",
                                            "        \"_type\": \"gatewaySettingsType\",",
                                            "        \"port\": 80,",
                                            "        \"firewallOpeningEnabled\": true,",
                                            "        \"sslRedirectEnabled\": true,",
                                            "        \"publicHost\": \"localhost\",",
                                            "        \"publicPort\": 80",
                                            "    },",
                                            "    \"identityStore\": {",
                                            "        \"_type\": \"identityStoreType\",",
                                            "        \"type\": \"local\"",
                                            "    }",
                                            "}}"
                                        ]
                                    ]
                                }
                            },
                            "/tmp/registration.json": {
                                "content": {
                                    "first_name": {
                                        "Ref": "RegFirstName"
                                    },
                                    "last_name": {
                                        "Ref": "RegLastName"
                                    },
                                    "email": {
                                        "Ref": "RegEmail"
                                    },
                                    "company": {
                                        "Fn::Sub": "${RegCompany};AWSQuickStart-Linux"
                                    },
                                    "title": {
                                        "Ref": "RegTitle"
                                    },
                                    "department": {
                                        "Ref": "RegDepartment"
                                    },
                                    "industry": {
                                        "Ref": "RegIndustry"
                                    },
                                    "phone": {
                                        "Ref": "RegPhone"
                                    },
                                    "city": {
                                        "Ref": "RegCity"
                                    },
                                    "state": {
                                        "Ref": "RegState"
                                    },
                                    "zip": {
                                        "Ref": "RegZip"
                                    },
                                    "country": {
                                        "Ref": "RegCountry"
                                    }
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "SubnetId": {
                    "Fn::Select": [
                        "0",
                        {
                            "Ref": "PrivateSubnetIds"
                        }
                    ]
                },
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "LinuxAMINameMap",
                                {
                                    "Ref": "AMIOS"
                                },
                                "Code"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroupIds": {
                    "Fn::If": [
                        "HasServerSecurityGroup",
                        [
                            {
                                "Ref": "ExistingSecurityGroup"
                            }
                        ],
                        [
                            {
                                "Ref": "ServerSecurityGroup"
                            }
                        ]
                    ]
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "IamInstanceProfile": {
                    "Ref": "RootInstanceProfile"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "VolumeSize": {
                                "Fn::FindInMap": [
                                    "DefaultConfiguration",
                                    "MachineConfiguration",
                                    "SystemVolumeSize"
                                ]
                            }
                        }
                    }
                ],
                "EbsOptimized": true,
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash -x",
                                "if [[ $(ls /etc/*-release) ]]; then",
                                "    OS=$( cat /etc/*-release \\",
                                "    | grep ^ID= |awk -F= '{print $2}'\\",
                                "    | tr -cd [:alpha:])",
                                "else",
                                "    return 1",
                                "fi",
                                "if [ \"$OS\" == \"ubuntu\" ]; then",
                                "    apt-get update",
                                "    apt-get install -y python-setuptools\n",
                                "    wget https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-postgresql-odbc_9.5.3_amd64.deb",
                                "    dpkg -i tableau-postgresql-odbc_9.5.3_amd64.deb",
                                "    apt-get install awscli -y",
                                "    apt-get install jq -y",
                                "    apt-get install expect -y",
                                "else",
                                "    rpm -i https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-postgresql-odbc-9.5.3-1.x86_64.rpm",
                                "    yum install epel-release -y",
                                "    yum install awscli -y",
                                "    yum install jq -y",
                                "    yum install expect -y",
                                "fi",
                                "# Call Init",
                                "/usr/bin/easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
                                {
                                    "Fn::Sub": "/opt/aws/bin/cfn-init --stack '${AWS::StackName}' --resource PrimaryServer  --region '${AWS::Region}'"
                                },
                                "# Various machine configs",
                                "hostnamectl set-hostname $(hostnamectl --static)",
                                "setup_sftp() {",
                                "    source '/tmp/secrets.properties'",
                                "    useradd -m \"$tsm_admin_user\"",
                                "    echo -e \"$tsm_admin_pass\\n$tsm_admin_pass\" | passwd \"$tsm_admin_user\" ",
                                "",
                                "    mkdir /restricted",
                                "    chown root:root /restricted",
                                "    chmod 551 /restricted",
                                "    sed -i.bak -e 's:Subsystem\\s\\+sftp\\s\\+/usr/libexec/openssh/sftp-server:Subsystem sftp  internal-sftp:' /etc/ssh/sshd_config",
                                "    printf \"\\nMatch User $tsm_admin_user\\n  ForceCommand internal-sftp\\n  ChrootDirectory /restricted\\n  PasswordAuthentication yes\\n  AllowTcpForwarding no\\n  PermitTunnel no\\n  X11Forwarding no\\n\" >>/etc/ssh/sshd_config",
                                "    service sshd restart",
                                "}",
                                "setup_sftp",
                                "unset -f setup_sftp",
                                "if [ \"$OS\" == \"ubuntu\" ]; then",
                                "    export LANG=en_US.UTF-8",
                                "    mv /tmp/tableau-server /tmp/tableau-server.deb",
                                "else",
                                "    mv /tmp/tableau-server /tmp/tableau-server.rpm",
                                "fi",
                                "# Install Tableau Server",
                                "install() {",
                                "    source '/tmp/secrets.properties'",
                                {
                                    "Fn::Sub": "    local license='${TableauServerLicenseKey}'"
                                },
                                "    local license=$([ \"$license\" == '' ] && echo '' || echo \"-k '$license'\")",
                                "    /tmp/automated-installer -a $tsm_admin_user -f /tmp/config.json -r /tmp/registration.json -s /tmp/secrets.properties $license -v --accepteula --force /tmp/tableau-server*",
                                "    source /etc/profile.d/tableau_server.sh",
                                "    tsm topology nodes get-bootstrap-file --file bootstrap.cfg -u \"$tsm_admin_user\" -p \"$tsm_admin_pass\"",
                                "}",
                                "install",
                                "unset -f install",
                                "# publish the Primary xml",
                                "mv bootstrap.cfg /restricted/",
                                "# Signal successful completion",
                                {
                                    "Fn::Sub": "/opt/aws/bin/cfn-signal -e $? --stack '${AWS::StackName}' --resource PrimaryServer --region '${AWS::Region}'"
                                },
                                "# Wait for workers",
                                "/tmp/workers.sh",
                                "# Cleanup",
                                "rm -f /tmp/config.json",
                                "rm -f /tmp/registration.json",
                                "rm -f /tmp/secrets.properties",
                                "rm -f /tmp/workers.sh",
                                "rm -f /tmp/tableau-server*",
                                "rm -f /tmp/automated-installer"
                            ]
                        ]
                    }
                },
                "Tags": [
                    {
                        "Key": "Name",
                        "Value": {
                            "Fn::Sub": "${AWS::StackName}-cfn-primary-tableau-server-linux"
                        }
                    }
                ]
            },
            "CreationPolicy": {
                "ResourceSignal": {
                    "Timeout": "PT60M"
                }
            }
        },
        "IPAssoc": {
            "Type": "AWS::EC2::EIPAssociation",
            "Condition": "HasElasticIP",
            "Properties": {
                "InstanceId": {
                    "Ref": "PrimaryServer"
                },
                "EIP": {
                    "Ref": "IPAddress"
                }
            }
        },
        "ServerSecurityGroup": {
            "Type": "AWS::EC2::SecurityGroup",
            "Condition": "NoServerSecurityGroup",
            "Properties": {
                "VpcId": {
                    "Ref": "VpcId"
                },
                "GroupDescription": {
                    "Fn::Sub": "Enable HTTP access via ports 80 and HTTPS access on port 8850, and SSH access from the provided network CIDR, plus all access from within the VPC"
                },
                "SecurityGroupIngress": [
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "80",
                        "ToPort": "80",
                        "CidrIp": {
                            "Ref": "SourceCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "8850",
                        "ToPort": "8850",
                        "CidrIp": {
                            "Ref": "SourceCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "22",
                        "ToPort": "22",
                        "CidrIp": {
                            "Ref": "SourceCIDR"
                        }
                    },
                    {
                        "IpProtocol": "tcp",
                        "FromPort": "0",
                        "ToPort": "65535",
                        "CidrIp": {
                            "Fn::GetAtt": [
                                "VpcInfo",
                                "CidrBlock"
                            ]
                        }
                    }
                ]
            }
        },
        "WorkerGroup": {
            "Type": "AWS::AutoScaling::AutoScalingGroup",
            "Properties": {
                "VPCZoneIdentifier": {
                    "Fn::Split": [
                        ",",
                        {
                            "Fn::Join": [
                                ",",
                                [
                                    {
                                        "Fn::Select": [
                                            "1",
                                            {
                                                "Ref": "PrivateSubnetIds"
                                            }
                                        ]
                                    },
                                    {
                                        "Fn::Select": [
                                            "2",
                                            {
                                                "Ref": "PrivateSubnetIds"
                                            }
                                        ]
                                    }
                                ]
                            ]
                        }
                    ]
                },
                "LaunchConfigurationName": {
                    "Ref": "WorkerLaunchConfig"
                },
                "MinSize": {
                    "Ref": "WorkerCount"
                },
                "MaxSize": {
                    "Ref": "WorkerCount"
                },
                "TargetGroupARNs": [
                    {
                        "Ref": "LoadBalancerTargetGroup"
                    }
                ]
            }
        },
        "WorkerLaunchConfig": {
            "Type": "AWS::AutoScaling::LaunchConfiguration",
            "Metadata": {
                "AWS::CloudFormation::Init": {
                    "config": {
                        "files": {
                            "/tmp/tableau-server": {
                                "source": {
                                    "Fn::If": [
                                        "IsCentos",
                                        {
                                            "Fn::FindInMap": [
                                                "DefaultConfiguration",
                                                "InstallationConfig",
                                                "TableauServerInstallerOnCentos"
                                            ]
                                        },
                                        {
                                            "Fn::FindInMap": [
                                                "DefaultConfiguration",
                                                "InstallationConfig",
                                                "TableauServerInstallerOnUbuntu"
                                            ]
                                        }
                                    ]
                                }
                            },
                            "/tmp/automated-installer": {
                                "mode": "550",
                                "source": {
                                    "Fn::FindInMap": [
                                        "DefaultConfiguration",
                                        "InstallationConfig",
                                        "AutomatedInstaller"
                                    ]
                                }
                            },
                            "/tmp/secrets.properties": {
                                "mode": "640",
                                "content": {
                                    "Fn::Join": [
                                        "\n",
                                        [
                                            {
                                                "Fn::Sub": "tsm_admin_user='${Username}'"
                                            },
                                            {
                                                "Fn::Sub": "tsm_admin_pass='${Password}'"
                                            },
                                            {
                                                "Fn::Sub": "tableau_server_admin_user='${TableauServerAdminUser}'"
                                            },
                                            {
                                                "Fn::Sub": "tableau_server_admin_pass='${TableauServerAdminPassword}'"
                                            }
                                        ]
                                    ]
                                }
                            }
                        }
                    }
                }
            },
            "Properties": {
                "ImageId": {
                    "Fn::FindInMap": [
                        "AWSAMIRegionMap",
                        {
                            "Ref": "AWS::Region"
                        },
                        {
                            "Fn::FindInMap": [
                                "LinuxAMINameMap",
                                {
                                    "Ref": "AMIOS"
                                },
                                "Code"
                            ]
                        }
                    ]
                },
                "InstanceType": {
                    "Ref": "InstanceType"
                },
                "SecurityGroups": {
                    "Fn::If": [
                        "HasServerSecurityGroup",
                        [
                            {
                                "Ref": "ExistingSecurityGroup"
                            }
                        ],
                        [
                            {
                                "Ref": "ServerSecurityGroup"
                            }
                        ]
                    ]
                },
                "KeyName": {
                    "Ref": "KeyPairName"
                },
                "IamInstanceProfile": {
                    "Ref": "RootInstanceProfile"
                },
                "BlockDeviceMappings": [
                    {
                        "DeviceName": "/dev/sda1",
                        "Ebs": {
                            "VolumeType": "gp2",
                            "VolumeSize": {
                                "Fn::FindInMap": [
                                    "DefaultConfiguration",
                                    "MachineConfiguration",
                                    "SystemVolumeSize"
                                ]
                            }
                        }
                    }
                ],
                "EbsOptimized": true,
                "UserData": {
                    "Fn::Base64": {
                        "Fn::Join": [
                            "\n",
                            [
                                "#!/bin/bash -x",
                                "if [[ $(ls /etc/*-release) ]]; then",
                                "    OS=$( cat /etc/*-release \\",
                                "    | grep ^ID= |awk -F= '{print $2}'\\",
                                "    | tr -cd [:alpha:])",
                                "else",
                                "    return 1",
                                "fi",
                                "if [ \"$OS\" == \"ubuntu\" ]; then",
                                "    apt-get update",
                                "    apt-get install -y python-setuptools\n",
                                "    wget https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-postgresql-odbc_9.5.3_amd64.deb",
                                "    dpkg -i tableau-postgresql-odbc_9.5.3_amd64.deb",
                                "    apt-get install awscli -y",
                                "    apt-get install jq -y",
                                "    apt-get install expect -y",
                                "else",
                                "    rpm -i https://s3-us-west-2.amazonaws.com/tableau-quickstart/tableau-postgresql-odbc-9.5.3-1.x86_64.rpm",
                                "    yum install epel-release -y",
                                "    yum install awscli -y",
                                "    yum install jq -y",
                                "    yum install expect -y",
                                "fi",
                                "# Call Init",
                                "/usr/bin/easy_install --script-dir /opt/aws/bin https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-latest.tar.gz",
                                {
                                    "Fn::Sub": "/opt/aws/bin/cfn-init --stack '${AWS::StackName}' --resource WorkerLaunchConfig  --region '${AWS::Region}'"
                                },
                                "# Various machine configs",
                                "hostnamectl set-hostname $(hostnamectl --static)",
                                "# Wait for Primary (use a random sleep to split up the requests and avoid throttling)",
                                "sleep $(($(expr $RANDOM % 30) * 3))",
                                {
                                    "Fn::Sub": "primary_json=$(aws cloudformation describe-stack-resource --stack-name '${AWS::StackName}' --region '${AWS::Region}' --logical-resource-id PrimaryServer)"
                                },
                                "while [ $(echo $primary_json | jq -r '.StackResourceDetail.ResourceStatus') != 'CREATE_COMPLETE' ]; do",
                                "    sleep 30",
                                {
                                    "Fn::Sub": "    primary_json=$(aws cloudformation describe-stack-resource --stack-name '${AWS::StackName}' --region '${AWS::Region}' --logical-resource-id PrimaryServer)"
                                },
                                "done",
                                "primary_id=$(echo $primary_json | jq -r '.StackResourceDetail.PhysicalResourceId')",
                                {
                                    "Fn::Sub": "primary_config=$(aws ec2 describe-instances --instance-id \"$primary_id\" --region '${AWS::Region}' | jq -r '.Reservations[0].Instances[0]')"
                                },
                                "primary_dns=$(echo $primary_config | jq -r '.PrivateDnsName')",
                                "transfer() {",
                                "    source '/tmp/secrets.properties'",
                                "    expect -c \"spawn sftp -o \\\"StrictHostKeyChecking no\\\" \\\"$tsm_admin_user@$primary_dns\\\";expect \\\"password:\\\";send \\\"$tsm_admin_pass\\n\\\";expect \\\"sftp>\\\";send \\\"get bootstrap.cfg\\n\\\";expect \\\"sftp>\\\";send \\\"exit\\n\\\";interact\"",
                                "}",
                                "transfer",
                                "unset -f transfer",
                                "if [ \"$OS\" == \"ubuntu\" ]; then",
                                "    export LANG=en_US.UTF-8",
                                "    mv /tmp/tableau-server /tmp/tableau-server.deb",
                                "else",
                                "    mv /tmp/tableau-server /tmp/tableau-server.rpm",
                                "fi",
                                "# Install Tableau Server",
                                "install() {",
                                "    source '/tmp/secrets.properties'",
                                "    useradd -m \"$tsm_admin_user\"",
                                "    echo -e \"$tsm_admin_pass\\n$tsm_admin_pass\" | passwd \"$tsm_admin_user\" ",
                                "",
                                "    /tmp/automated-installer -a $tsm_admin_user -f /dev/zero -r /dev/zero -s /tmp/secrets.properties -b bootstrap.cfg -v --accepteula --force /tmp/tableau-server*",
                                "}",
                                "install",
                                "unset -f install",
                                "# Signal successful completion",
                                {
                                    "Fn::Sub": "/opt/aws/bin/cfn-signal -e $? '${WorkerWaitHandle}'"
                                },
                                "# Cleanup",
                                "rm -f /tmp/secrets.properties",
                                "rm -f /tmp/tableau-server*",
                                "rm -f /tmp/automated-installer"
                            ]
                        ]
                    }
                }
            }
        }
    },
    "Outputs": {
        "LoadBalancerDNSName": {
            "Description": "Direct DNS name of load balancer",
            "Value": {
                "Fn::GetAtt": [
                    "ServerLoadBalancer",
                    "DNSName"
                ]
            }
        },
        "PrimaryServer": {
            "Description": "Primary server address",
            "Value": {
                "Fn::GetAtt": [
                    "PrimaryServer",
                    "PublicDnsName"
                ]
            }
        },
        "TableauServerURL": {
            "Description": "Public DNS name to reach cluster",
            "Value": {
                "Fn::Join": [
                    "",
                    [
                        {
                            "Fn::If": [
                                "HasSSLCertificate",
                                "https://",
                                "http://"
                            ]
                        },
                        {
                            "Fn::If": [
                                "CreateDNSEntry",
                                {
                                    "Ref": "AWSPublicFQDN"
                                },
                                {
                                    "Fn::GetAtt": [
                                        "ServerLoadBalancer",
                                        "DNSName"
                                    ]
                                }
                            ]
                        },
                        "/"
                    ]
                ]
            }
        },
        "SecurityGroup": {
            "Description": "The security group the instances belong to",
            "Value": {
                "Ref": "ServerSecurityGroup"
            }
        }
    }
}
